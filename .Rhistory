geom_bar(stat = "identity") +
facet_wrap(~ item1, scales = "free") +
coord_flip()
install.packages("rmarkdown")
install.packages("tm")
data("AssociatedPress", package = "topicmodels")
AssociatedPress
install.packages("topicmodels")
install.packages("broom")
install.packages("broom")
library(topicmodels)
library(broom)
library(topicmodels)
library(broom)
data("AssociatedPress", package = "topicmodels")
AssociatedPress
terms <- Terms(AssociatedPress)
library(tm)
terms <- Terms(AssociatedPress)
head(terms)
library(dplyr)
library(tidytext)
ap_td <- tidy(AssociatedPress)
ap_td
ap_sentiments <- ap_td %>%
inner_join(get_sentiments("bing"), by = c(term = "word"))
ap_sentiments
library(ggplot2)
ap_sentiments %>%
count(sentiment, term, wt = count) %>%
ungroup() %>%
filter(n >= 200) %>%
mutate(n = ifelse(sentiment == "negative", -n, n)) %>%
mutate(term = reorder(term, n)) %>%
ggplot(aes(term, n, fill = sentiment)) +
geom_bar(stat = "identity") +
ylab("Contribution to sentiment") +
coord_flip()
install.packages("methods")
install.packages("methods")
install.packages("methods")
install.packages("methods")
install.packages("methods")
install.packages("methods")
install.packages("methods")
install.packages("methods")
install.packages("methods")
library(methods)
data("data_corpus_inaugural", package = "quanteda")
inaug_dfm <- quanteda::dfm(data_corpus_inaugural, verbose = FALSE)
library(methods)
data("data_corpus_inaugural", package = "quanteda")
inaug_dfm <- quanteda::dfm(data_corpus_inaugural, verbose = FALSE)
library(topicmodels)
library(broom)
library(tm)
library(dplyr)
library(tidytext)
library(methods)
library(methods)
data("data_corpus_inaugural", package = "quanteda")
inaug_dfm <- quanteda::dfm(data_corpus_inaugural, verbose = FALSE)
inaug_dfm <- quanteda::dfm(data_corpus_inaugural, verbose = FALSE)
inaug_dfm
inaug_td <- tidy(inaug_dfm)
inaug_td
inaug_tf_idf <- inaug_td %>%
bind_tf_idf(term, document, count) %>%
arrange(desc(tf_idf))
inaug_tf_idf
library(tidyr)
year_term_counts <- inaug_td %>%
extract(document, "year", "(\\d+)", convert = TRUE) %>%
complete(year, term, fill = list(count = 0)) %>%
group_by(year) %>%
mutate(year_total = sum(count))
year_term_counts %>%
filter(term %in% c("god", "america", "foreign",
"union", "constitution", "freedom")) %>%
ggplot(aes(year, count / year_total)) +
geom_point() +
geom_smooth() +
facet_wrap(~ term, scales = "free_y") +
scale_y_continuous(labels = scales::percent_format()) +
ylab("% frequency of word in inaugural address")
library(ggplot2)
year_term_counts %>%
filter(term %in% c("god", "america", "foreign",
"union", "constitution", "freedom")) %>%
ggplot(aes(year, count / year_total)) +
geom_point() +
geom_smooth() +
facet_wrap(~ term, scales = "free_y") +
scale_y_continuous(labels = scales::percent_format()) +
ylab("% frequency of word in inaugural address")
install.packages("tm.plugin.webmining")
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
library(topicmodels)
library(broom)
library(tm)
library(dplyr)
library(tidytext)
library(methods)
library(tidyr)
library(ggplot2)
data("AssociatedPress", package = "topicmodels")
AssociatedPress
terms <- Terms(AssociatedPress)
head(terms)
ap_td <- tidy(AssociatedPress)
ap_td
ap_sentiments <- ap_td %>%
inner_join(get_sentiments("bing"), by = c(term = "word"))
ap_sentiments
library(ggplot2)
ap_sentiments %>%
count(sentiment, term, wt = count) %>%
ungroup() %>%
filter(n >= 200) %>%
mutate(n = ifelse(sentiment == "negative", -n, n)) %>%
mutate(term = reorder(term, n)) %>%
ggplot(aes(term, n, fill = sentiment)) +
geom_bar(stat = "identity") +
ylab("Contribution to sentiment") +
coord_flip()
install.packages("methods")
library(methods)
data("data_corpus_inaugural", package = "quanteda")
inaug_dfm <- quanteda::dfm(data_corpus_inaugural, verbose = FALSE)
inaug_dfm
inaug_td <- tidy(inaug_dfm)
inaug_td
inaug_tf_idf <- inaug_td %>%
bind_tf_idf(term, document, count) %>%
arrange(desc(tf_idf))
inaug_tf_idf
year_term_counts <- inaug_td %>%
extract(document, "year", "(\\d+)", convert = TRUE) %>%
complete(year, term, fill = list(count = 0)) %>%
group_by(year) %>%
mutate(year_total = sum(count))
year_term_counts %>%
filter(term %in% c("god", "america", "foreign",
"union", "constitution", "freedom")) %>%
ggplot(aes(year, count / year_total)) +
geom_point() +
geom_smooth() +
facet_wrap(~ term, scales = "free_y") +
scale_y_continuous(labels = scales::percent_format()) +
ylab("% frequency of word in inaugural address")
install.packages("methods")
library(tm.plugin.webmining)
library(purrr)
install.packages("rJava")
library(tm.plugin.webmining)
Sys.setenv(JAVA_HOME = "C:/Program Files/Java/jdk1.8.0_101/")
library(tm.plugin.webmining)
library(tm.plugin.webmining)
##Example: Mining Financial Articles
library(rJava)
library(tm.plugin.webmining)
##Example: Mining Financial Articles
library(rJava)
library(pdftools)
library(dplyr)
library(tidytext)
library(readtext)
library(tm)
library(ggplot2)
library(tidyr)
library(reshape2)
library(wordcloud2)
data(stop_words)
library(pdftools)
library(dplyr)
library(tidytext)
library(readtext)
library(tm)
library(ggplot2)
library(tidyr)
library(reshape2)
library(wordcloud2)
data(stop_words)
book <- pdftools::pdf_text("dylanlyrics.pdf")
dylan_words <- tibble(line = 1:length(book), text = book)
book <- pdftools::pdf_text("http://www.passwordpublish.co.uk/Publishing%20ebook/dylanlyrics.pdf")
book
dylan_words <- tibble(line = 1:length(book), text = book)
dylan_words
lyrics <- dylan_words %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
count(word, sort = TRUE)
lyrics
setwd("C:/Users/Mustafa/Desktop/Bob Dylan")
library(pdftools)
library(dplyr)
library(tidytext)
library(readtext)
library(tm)
library(ggplot2)
library(tidyr)
library(reshape2)
library(wordcloud2)
data(stop_words)
book <- pdftools::pdf_text("dylanlyrics.pdf")
dylan_words <- tibble(line = 1:length(book), text = book)
lyrics <- dylan_words %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
count(word, sort = TRUE)
lyrics
lyrics <- lyrics[-c(1,2, 3, 4, 5, 7, 9, 12, 13, 14, 16, 24), ]
lyrics
lyrics %>%
filter(n > 110) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = word)) +
geom_col(show.legend = FALSE) +
labs(x = "Frequency", y = "Word", title = "Frequently Used Words in Songs by Bob Dylan") +
theme(panel.background = element_rect(color = "black", fill = "black"),
plot.background = element_rect(fill = 'black', colour = 'black'),
plot.title = element_text(size = rel(2), hjust = 0.5, margin = margin(b = 15, t = 0, r = 0, l = 0), colour = "white"),
axis.title.y = element_text(margin = margin(r = 15), size = 20, colour = "white"),
axis.title.x = element_text(margin = margin(t = 15), size = 20, colour = "white"),
plot.caption = element_text(size = 15),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(colour = "white", size = 12, face="bold"),
axis.text.y = element_text(colour = "white", size = 12, face="bold" ),
axis.line = element_line(color="white", size = 1.5),
axis.ticks = element_blank())
lyrics_sentiment <- lyrics %>%
inner_join(get_sentiments("afinn")) %>%
inner_join(get_sentiments("bing"))
lyrics_graph <-  lyrics %>%
filter(n > 110) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = word)) +
geom_col(show.legend = FALSE) +
labs(x = "Frequency", y = "Word", title = "Frequently Used Words in Songs by Bob Dylan") +
theme(panel.background = element_rect(color = "black", fill = "black"),
plot.background = element_rect(fill = 'black', colour = 'black'),
plot.title = element_text(size = rel(2), hjust = 0.5, margin = margin(b = 15, t = 0, r = 0, l = 0), colour = "white"),
axis.title.y = element_text(margin = margin(r = 15), size = 20, colour = "white"),
axis.title.x = element_text(margin = margin(t = 15), size = 20, colour = "white"),
plot.caption = element_text(size = 15),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(colour = "white", size = 12, face="bold"),
axis.text.y = element_text(colour = "white", size = 12, face="bold" ),
axis.line = element_line(color="white", size = 1.5),
axis.ticks = element_blank())
lyrics_graph
lyrics_sentiment <- lyrics %>%
inner_join(get_sentiments("afinn")) %>%
inner_join(get_sentiments("bing"))
lyrics_sentiment
sum(lyrics_sentiment$value)
lyrics_sentiment$sent <- lyrics_sentiment$n * lyrics_sentiment$value
sum(lyrics_sentiment$sent)
lyrics_sentiment %>%
group_by(sentiment) %>%
slice_max(n, n = 10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(x = "Number of occurences", y = "Word", title = "A Sentiment Analysis of Bob Dylan Songs") +
theme(panel.background = element_rect(color = "black", fill = "black"),
plot.background = element_rect(fill = 'black', colour = 'black'),
plot.title = element_text(size = rel(2), hjust = 0.5, margin = margin(b = 15, t = 0, r = 0, l = 0), colour = "white"),
axis.title.y = element_text(margin = margin(r = 15), size = 20, colour = "white"),
axis.title.x = element_text(margin = margin(t = 15), size = 20, colour = "white"),
plot.caption = element_text(size = 15),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(colour = "white", size = 12, face="bold"),
axis.text.y = element_text(colour = "white", size = 12, face="bold" ),
axis.line = element_line(color="white", size = 1.5),
strip.text.x = element_text(size = 12, color = "white", face = "bold"),
strip.text.y = element_text(size = 12, color = "white", face = "bold"),
strip.background = element_rect(color = "black", fill = "black"),
axis.ticks = element_blank()) +
scale_fill_manual(values= c("#f0009c","#f0009c"))
lyrics_sentiment_graph <- lyrics_sentiment %>%
group_by(sentiment) %>%
slice_max(n, n = 10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(x = "Number of occurences", y = "Word", title = "A Sentiment Analysis of Bob Dylan Songs") +
theme(panel.background = element_rect(color = "black", fill = "black"),
plot.background = element_rect(fill = 'black', colour = 'black'),
plot.title = element_text(size = rel(2), hjust = 0.5, margin = margin(b = 15, t = 0, r = 0, l = 0), colour = "white"),
axis.title.y = element_text(margin = margin(r = 15), size = 20, colour = "white"),
axis.title.x = element_text(margin = margin(t = 15), size = 20, colour = "white"),
plot.caption = element_text(size = 15),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(colour = "white", size = 12, face="bold"),
axis.text.y = element_text(colour = "white", size = 12, face="bold" ),
axis.line = element_line(color="white", size = 1.5),
strip.text.x = element_text(size = 12, color = "white", face = "bold"),
strip.text.y = element_text(size = 12, color = "white", face = "bold"),
strip.background = element_rect(color = "black", fill = "black"),
axis.ticks = element_blank()) +
scale_fill_manual(values= c("#f0009c","#f0009c"))
lyrics_sentiment_graph
lyrics_sentiment <- lyrics_sentiment[order(lyrics_sentiment$sent),]
negative_outliers <- lyrics_sentiment[1:10,]
lyrics_sentiment <- lyrics_sentiment[order(-lyrics_sentiment$sent),]
positive_outliers <- lyrics_sentiment[1:10,]
outliers <- rbind(negative_outliers, positive_outliers)
outliers$sent <- abs(outliers$sent)
outliers %>%
group_by(sentiment) %>%
mutate(word = reorder(word, sent)) %>%
ggplot(aes(sent, word, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(x = "Contribution to sentiment",
y = "Words") +
theme(panel.background = element_rect(color = "black", fill = "black"),
plot.background = element_rect(fill = 'black', colour = 'black'),
plot.title = element_text(size = rel(2), hjust = 0.5, margin = margin(b = 15, t = 0, r = 0, l = 0), colour = "white"),
axis.title.y = element_text(margin = margin(r = 15), size = 20, colour = "white"),
axis.title.x = element_text(margin = margin(t = 15), size = 20, colour = "white"),
plot.caption = element_text(size = 15),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(colour = "white", size = 12, face="bold"),
axis.text.y = element_text(colour = "white", size = 12, face="bold" ),
axis.line = element_line(color="white", size = 1.5),
strip.text.x = element_text(size = 12, color = "white", face = "bold"),
strip.text.y = element_text(size = 12, color = "white", face = "bold"),
strip.background = element_rect(color = "black", fill = "black"),
axis.ticks = element_blank()) +
scale_fill_manual(values= c("#f0009c","#f0009c"))
outliers
outliers_graph <- outliers %>%
group_by(sentiment) %>%
mutate(word = reorder(word, sent)) %>%
ggplot(aes(sent, word, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(x = "Contribution to sentiment",
y = "Words") +
theme(panel.background = element_rect(color = "black", fill = "black"),
plot.background = element_rect(fill = 'black', colour = 'black'),
plot.title = element_text(size = rel(2), hjust = 0.5, margin = margin(b = 15, t = 0, r = 0, l = 0), colour = "white"),
axis.title.y = element_text(margin = margin(r = 15), size = 20, colour = "white"),
axis.title.x = element_text(margin = margin(t = 15), size = 20, colour = "white"),
plot.caption = element_text(size = 15),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(colour = "white", size = 12, face="bold"),
axis.text.y = element_text(colour = "white", size = 12, face="bold" ),
axis.line = element_line(color="white", size = 1.5),
strip.text.x = element_text(size = 12, color = "white", face = "bold"),
strip.text.y = element_text(size = 12, color = "white", face = "bold"),
strip.background = element_rect(color = "black", fill = "black"),
axis.ticks = element_blank()) +
scale_fill_manual(values= c("#f0009c","#f0009c"))
outliers_graph
library(wordcloud)
wordcloud2(lyrics[1:25,], color = "random-light", backgroundColor = "black", fontWeight = "bold", rotateRatio = 0.7,
shape = "star", ellipticity = 1)
lyrics_biagram <- dylan_words %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2) %>%
count(bigram, sort = TRUE) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
unite(bigram, word1, word2, sep = " ")
lyrics_biagram
lyrics_biagram[1:20,] %>%
mutate(bigram = reorder(bigram, n)) %>%
ggplot(aes(n, bigram, group = 1)) +
geom_col(show.legend = FALSE, fill = '#f0009c') +
labs(x = "Number of Occurences", y = "Bigrams", title = "Biagrams in Bob Dylan's Songs") +
theme(panel.background = element_rect(color = "black", fill = "black"),
plot.background = element_rect(fill = 'black', colour = 'black'),
plot.title = element_text(size = rel(2), hjust = 0.5, margin = margin(b = 15, t = 0, r = 0, l = 0), colour = "white"),
axis.title.y = element_text(margin = margin(r = 15), size = 20, colour = "white"),
axis.title.x = element_text(margin = margin(t = 15), size = 20, colour = "white"),
plot.caption = element_text(size = 15),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(colour = "white", size = 12, face="bold"),
axis.text.y = element_text(colour = "white", size = 12, face="bold" ),
axis.line = element_line(color="white", size = 1.5),
strip.text.x = element_text(size = 12, color = "white", face = "bold"),
strip.text.y = element_text(size = 12, color = "white", face = "bold"),
strip.background = element_rect(color = "black", fill = "black"),
axis.ticks = element_blank())
bigrams_graph <- lyrics_biagram[1:20,] %>%
mutate(bigram = reorder(bigram, n)) %>%
ggplot(aes(n, bigram, group = 1)) +
geom_col(show.legend = FALSE, fill = '#f0009c') +
labs(x = "Number of Occurences", y = "Bigrams", title = "Biagrams in Bob Dylan's Songs") +
theme(panel.background = element_rect(color = "black", fill = "black"),
plot.background = element_rect(fill = 'black', colour = 'black'),
plot.title = element_text(size = rel(2), hjust = 0.5, margin = margin(b = 15, t = 0, r = 0, l = 0), colour = "white"),
axis.title.y = element_text(margin = margin(r = 15), size = 20, colour = "white"),
axis.title.x = element_text(margin = margin(t = 15), size = 20, colour = "white"),
plot.caption = element_text(size = 15),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(colour = "white", size = 12, face="bold"),
axis.text.y = element_text(colour = "white", size = 12, face="bold" ),
axis.line = element_line(color="white", size = 1.5),
strip.text.x = element_text(size = 12, color = "white", face = "bold"),
strip.text.y = element_text(size = 12, color = "white", face = "bold"),
strip.background = element_rect(color = "black", fill = "black"),
axis.ticks = element_blank())
bigrams_graph
lyrics
lyrics
lyrics_graph
bigrams_graph
bigrams_graph <- lyrics_biagram[1:20,] %>%
mutate(bigram = reorder(bigram, n)) %>%
ggplot(aes(n, bigram, group = 1)) +
geom_col(show.legend = FALSE, fill = '#f0009c') +
labs(x = "Frequency", y = "Bigrams", title = "Biagrams in Bob Dylan's Songs") +
theme(panel.background = element_rect(color = "black", fill = "black"),
plot.background = element_rect(fill = 'black', colour = 'black'),
plot.title = element_text(size = rel(2), hjust = 0.5, margin = margin(b = 15, t = 0, r = 0, l = 0), colour = "white"),
axis.title.y = element_text(margin = margin(r = 15), size = 20, colour = "white"),
axis.title.x = element_text(margin = margin(t = 15), size = 20, colour = "white"),
plot.caption = element_text(size = 15),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(colour = "white", size = 12, face="bold"),
axis.text.y = element_text(colour = "white", size = 12, face="bold" ),
axis.line = element_line(color="white", size = 1.5),
strip.text.x = element_text(size = 12, color = "white", face = "bold"),
strip.text.y = element_text(size = 12, color = "white", face = "bold"),
strip.background = element_rect(color = "black", fill = "black"),
axis.ticks = element_blank())
bigrams_graph
outliers_graph
outliers_graph <- outliers %>%
group_by(sentiment) %>%
mutate(word = reorder(word, sent)) %>%
ggplot(aes(sent, word, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(x = "Weighted Frequency",
y = "Words") +
theme(panel.background = element_rect(color = "black", fill = "black"),
plot.background = element_rect(fill = 'black', colour = 'black'),
plot.title = element_text(size = rel(2), hjust = 0.5, margin = margin(b = 15, t = 0, r = 0, l = 0), colour = "white"),
axis.title.y = element_text(margin = margin(r = 15), size = 20, colour = "white"),
axis.title.x = element_text(margin = margin(t = 15), size = 20, colour = "white"),
plot.caption = element_text(size = 15),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(colour = "white", size = 12, face="bold"),
axis.text.y = element_text(colour = "white", size = 12, face="bold" ),
axis.line = element_line(color="white", size = 1.5),
strip.text.x = element_text(size = 12, color = "white", face = "bold"),
strip.text.y = element_text(size = 12, color = "white", face = "bold"),
strip.background = element_rect(color = "black", fill = "black"),
axis.ticks = element_blank()) +
scale_fill_manual(values= c("#f0009c","#f0009c"))
outliers_graph
lyrics_sentiment_graph
lyrics_sentiment_graph <- lyrics_sentiment %>%
group_by(sentiment) %>%
slice_max(n, n = 10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(x = "Frequency", y = "Word", title = "A Sentiment Analysis of Bob Dylan Songs") +
theme(panel.background = element_rect(color = "black", fill = "black"),
plot.background = element_rect(fill = 'black', colour = 'black'),
plot.title = element_text(size = rel(2), hjust = 0.5, margin = margin(b = 15, t = 0, r = 0, l = 0), colour = "white"),
axis.title.y = element_text(margin = margin(r = 15), size = 20, colour = "white"),
axis.title.x = element_text(margin = margin(t = 15), size = 20, colour = "white"),
plot.caption = element_text(size = 15),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(colour = "white", size = 12, face="bold"),
axis.text.y = element_text(colour = "white", size = 12, face="bold" ),
axis.line = element_line(color="white", size = 1.5),
strip.text.x = element_text(size = 12, color = "white", face = "bold"),
strip.text.y = element_text(size = 12, color = "white", face = "bold"),
strip.background = element_rect(color = "black", fill = "black"),
axis.ticks = element_blank()) +
scale_fill_manual(values= c("#f0009c","#f0009c"))
lyrics_sentiment
lyrics_graph
bigrams_graph
lyrics
lyrics_sentiment
library(wordcloud)
outliers_graph
bigrams_graph
setwd("C:/Users/Mustafa/Desktop/Bob Dylan")
